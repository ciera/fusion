/**
* JJTree file
*/

options {
  JDK_VERSION = "1.5";
  STATIC = false;
}
 
PARSER_BEGIN(FPLParser) 
package edu.cmu.cs.fusion.parsers.predicate;

import edu.cmu.cs.fusion.constraint.predicates.*;
import edu.cmu.cs.fusion.constraint.operations.*;
import java.util.*;
import edu.cmu.cs.crystal.util.Utilities;
import edu.cmu.cs.crystal.util.Pair;
import edu.cmu.cs.fusion.Relation;
import edu.cmu.cs.fusion.RelationsEnvironment;
import edu.cmu.cs.fusion.constraint.Effect;
import edu.cmu.cs.fusion.constraint.Operation;
import edu.cmu.cs.fusion.constraint.SpecVar;
import edu.cmu.cs.fusion.constraint.Predicate;
import java.io.StringReader;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaModelException;


public class FPLParser {
  	RelationsEnvironment relations;
  	IType context;
  	
	public FPLParser(RelationsEnvironment rels, IType context)	{
	  	this("", rels, context);
	}

	public FPLParser(String input, RelationsEnvironment rels, IType context)
	{
	  	this(new StringReader(input));
		this.context = context;
		this.relations = rels;
	}

	public void reset(String input)	{		ReInit(new StringReader(input));
	}
	
}
PARSER_END(FPLParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : /* OPERATORS */
{
	< EQUALS: "==" > 
|	< NEQ: "!=" > 
|	< INSTANCEOF: "instanceof" >
|   < NEG :"!" >
|   < TEST :"?" >
|   < TEST_SEP :":" >
|   < OR : "OR" >
|   < IMPLIES : "IMPLIES" >
|   < AND : "AND" >

}

TOKEN : /* Operation Tokens */
{
	< EOM: "EOM" > 
|   < DOT : "." >
}



TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: (< DIGIT >)+ >
|
  < TRUE: "TRUE" >
| 
  < FALSE:  "FALSE" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|  < #LETTER: ["_","a"-"z","A"-"Z"] >
|  < #DIGIT: ["0"-"9"] >
}

Predicate expression():
{Predicate p;
} 
{
  p = impExpression()
  {return p;}
}

Predicate impExpression():
{
	Predicate rhs;
	Predicate lhs;
}
{
  lhs = orExpression()
  (
    ( < IMPLIES > ) rhs = orExpression()
  {
    lhs = new ImpliesPredicate(lhs, rhs);
    rhs = null;
  }
  )*
  {
    return lhs;
  }
}

Predicate orExpression():
{
	Predicate rhs;
	Predicate lhs;
}
{
  lhs = andExpression()
  (
    ( < OR > ) rhs = andExpression()
  {
    lhs = new OrPredicate(lhs, rhs);
    rhs = null;
  }
  )*
  {
    return lhs;
  }
}

Predicate andExpression():
{
	Predicate rhs;
	Predicate lhs;
}
{
  lhs = parenExpression()
  (
  ( <AND > ) rhs = parenExpression()
  {
    lhs = new AndPredicate(lhs, rhs);
    rhs = null;  }
  )*
  {    return lhs;
  }
}

Predicate parenExpression():
{
Predicate p;
}
{
  "(" p = expression() ")" { return p;}
| 
  p = relationship() { return p;}
}

Predicate relationship() :
{
Predicate p;
}
{
	p = testUserRelationship()	{ return p;}
| 
  	LOOKAHEAD(3)
	p = userRelationship() {return p;}
|
	LOOKAHEAD(2)
	p = iof() {return p;}
|
	LOOKAHEAD(2)
 	p = equal() {return p;}
|
	p = boolValue() {return p;}
|
	p = boolLiteral() {return p;}
}

TestPredicate testUserRelationship() :
{
	SpecVar test;
	boolean isPos = true;
	RelationshipPredicate inner;}
{
	< TEST >
	inner = userRelationship()
	< TEST_SEP >
	[< NEG > {isPos = false;	}]
	test = param()
	{
		return new TestPredicate(inner, test, isPos);	  
	} }

RelationshipPredicate userRelationship() :
{
	Relation rel;
	boolean isPos = true;
	SpecVar[] params;
	int numParams;
}
{
	[< NEG >{isPos = false;	}]
 	 rel = relation()
	{numParams = rel.getFullyQualifiedTypes().length;}
	params = wcParams(numParams)
	{
	  return new RelationshipPredicate(rel, params, isPos);	}
}

InstanceOfPredicate iof():
{
	SpecVar v;
	String qualifiedType;
	boolean isPos = true;
}
{
	v = param()
	[< NEG >{isPos = false;	}] < INSTANCEOF >
	qualifiedType = type()
	{
	  return new InstanceOfPredicate(v, qualifiedType, isPos);
	}
}

ReferenceEqualityPredicate equal():
{
	SpecVar left, right;
	boolean isEquals = true;
}
{
	left = param()	(	  < EQUALS > | < NEQ >	  {	    isEquals = false;
	  }
	)
	right = param()
	{
		return new ReferenceEqualityPredicate(left, right, isEquals);	}
}

BooleanValue boolValue() :
{
	SpecVar v;}
{	v = param()
	{	  return new BooleanValue(v, true);
	}
|
	< NEG >
	v = param()
	{		return new BooleanValue(v, false);
	}
}

/** A literal. */
Predicate boolLiteral() :
{
}
{ 
	< TRUE > { return new TruePredicate(); }|
	< FALSE > { return new FalsePredicate(); }
}



/**
*
* Parsing of Effects
*
**/


Effect effect():
{
  Relation rel;
  int numParams;
  boolean isPos = true;
  SpecVar[] vars;
  SpecVar testVar;
}
{
  [< NEG >{isPos = false;	}]
  rel = relation()
  {numParams = rel.getFullyQualifiedTypes().length;}  vars = params(numParams)
  {
    if (isPos)
    	return Effect.createAddEffect(rel, vars);
    else
    	return Effect.createRemoveEffect(rel, vars);  }
|
  <TEST >
  [< NEG >{isPos = false;	}]
  rel = relation()
  {numParams = rel.getFullyQualifiedTypes().length;}
  vars = params(numParams)
  < TEST_SEP >
  testVar = param()
  {    if (isPos)
    	return Effect.createTestEffect(rel, vars, testVar);
    else
    	return Effect.createNegatedTestEffect(rel, vars, testVar);
  }
}




/**
*
* Operation parsing
*
**/

Operation operation() :{
  Operation op;}
{
	op = eom() {return op;}
|
	op = invoke() {return op;}}

Operation eom() :
{
  SpecVar param;}
{	< EOM >	"("		param = wcParam()
	")"
	{	  return new EndOfMethodOp(param);
	}
}

MethodInvocationOp invoke() :
{
  String receiverType;
  Token name;
  Pair<String[], SpecVar[] > params;
  String returnType;}
{
  receiverType = type()
  < DOT >
  name = < IDENTIFIER >
  params = typedParams()
  ":"
  returnType = type()
  {
	return new MethodInvocationOp(name.image, receiverType, params.snd(), params.fst(), returnType);
  }}










/**
*
* General parsing utlities
*
**/




Relation relation():
{
  Token t;
  Relation rel;}
{
	t = <IDENTIFIER>
	{
	  try	  {
		  rel = relations.findRelation(Utilities.resolveType(context, t.image));
		  if (rel == null)
		  	throw new ParseException("Relation " + Utilities.resolveType(context, t.image) + " could not be found.");
		  return rel;
		}
		catch (JavaModelException err)		{			throw new ParseException(err.getMessage());
		}
	}}

Pair<String[], SpecVar[]> typedParams() :
{
  SpecVar var;
  String type;
  ArrayList<SpecVar > params = new ArrayList<SpecVar>();
  ArrayList<String> types = new ArrayList<String>();
  String[] typeArr;
  SpecVar[] paramArr;
}
{
	"("
	[
	type = type()
	var = param()
	{
	  params.add(var);
	  types.add(type);
	}

	(
	  "," type = type() var = param()
	{
	  params.add(var);
	  types.add(type);
	}
	)*
	]
	")"
  {
    paramArr = new SpecVar[params.size()];
    typeArr = new String[params.size()];    
	for (int ndx = 0; ndx < params.size(); ndx++) {		paramArr[ndx] = params.get(ndx);
		typeArr[ndx] = types.get(ndx);
	}
    
    return new Pair<String[], SpecVar[]>(typeArr, paramArr);
  }   
}


SpecVar[] params(int numParams) :{
  int ndx;
  SpecVar var;
  SpecVar[] params;}
{
	{
	  params = new SpecVar[numParams];
	  ndx = 0;
	}
	"(" var = param()
	{
	  params[ndx] = var;
	  ndx++;
	}
	(
	  "," var = param()
	{
	  params[ndx] = var;
	  ndx++;
	}
	)* ")"
  {return params;}   }

SpecVar[] wcParams(int numParams) :
{
  int ndx;
  SpecVar var;
  SpecVar[] params;
}
{
	{
	  params = new SpecVar[numParams];
	  ndx = 0;
	}
	"(" var = wcParam()
	{
	  params[ndx] = var;
	  ndx++;
	}
	(
	  "," var = wcParam()
	{
	  params[ndx] = var;
	  ndx++;
	}
	)* ")"
  {return params;}   
}



String type() :
{
  Token t;
  String qualifiedType;
}
{	t = < IDENTIFIER >
	{
	  try
	  {
		  qualifiedType = Utilities.resolveType(context, t.image);
		  return qualifiedType;
	  }
	  catch (JavaModelException err)
	  {
	    return null;
	  }
	}
}

SpecVar wcParam() :
{
  SpecVar var;
}
{
  var = param()
  {
    return var;
  }
|
  "*"
  {
    return new SpecVar();
  }
}

SpecVar param() :
{
  Token t;
}
{
  t = < IDENTIFIER >
  {    return new SpecVar(t.image);
  }
}
